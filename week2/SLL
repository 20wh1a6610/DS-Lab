#include<stdio.h>
#include<stdlib.h>
struct node
{
    int data;
    struct node *link;
};
struct node *head = NULL,*cur,*temp,*temp1,*t1;

struct node *create()
{
    int n;
    printf("enter no of nodes:");
    scanf("%d",&n);
    while(n--)
    {
        cur = (struct node *)malloc(sizeof(struct node));
        scanf("%d",&(cur->data));
        cur->link = NULL;

    if(head == NULL){
        head = cur;
    }
    else{
        temp = head;
        while(temp->link != NULL)
            temp = temp->link;
        temp->link = cur;

    }
    }
    return head;
}

struct node *insert_begin(int ele)
{
    cur = (struct node *)malloc(sizeof(struct node));
    cur->data= ele;
    cur->link=head;
    head=cur;
    return head;
}

struct node *insert_end(int ele)
{
    cur=(struct node*)malloc(sizeof(struct node));
    cur->data = ele;
    cur->link = NULL;
    temp=head;
    while(temp->link != NULL)
          temp= temp->link;
    temp->link = cur;
    return head;
}

struct node *insert_pos(int ele,int pos)
{
    int c=1;
    cur=(struct node *)malloc(sizeof(struct node));
    cur->data=ele;
    temp=head;
    while(c<pos-1)
    {
        temp=temp->link;
        c++;
    }
    cur->link = temp->link;
    temp->link= cur;
    return head;
}

struct node *delete_begin(struct node *head){
    temp = head;
    head = temp->link;
    printf("deleted data %d",temp->data);
    free(temp);
    return head;
}

struct node *delete_end(struct node*head){
    temp = head;
    while(temp->link != NULL)
    {
    temp1=temp;
    temp=temp->link;
    }
    temp->link = NULL;
    printf("deleted data %d",temp->data);
    free(temp);
    return head;
}

struct node *delete_pos(struct node *head,int pos)
{
    temp=head;
    int c= 1;
    while(c<pos){
        temp1 = temp;
        temp= temp->link;
        c++;
    }
    temp1->link = temp->link;
    printf("deleted element %d",temp->data);
    free(temp);
    return head;
};

void display(struct node *head){
    temp=head;
    while(temp!=NULL)
    {
        printf("%d ->",temp->data);
        temp= temp->link;

    }
}

void reverse_display(struct node *head)
{
    if(head != NULL)
    {
        reverse_display(head->link);
        printf("%d->",head->data);
    }
}

int search(struct node *head,int key){
    int c = 1;
    temp = head;
    while(temp != NULL){
        if(temp -> data == key){
            return c;
        }
        temp = temp -> link;
        c++;
        }
        return -1;
}

 
 struct node *sort(struct node *head){
    int x;
    temp = head;
    while(temp != NULL){
        temp1 = temp -> link;
        while(temp1 != NULL){
            if(temp -> data > temp1 -> data){
                x = temp -> data;
                temp -> data = temp1 -> data;
                temp1 -> data = x;
            }
            temp1 = temp1 -> link;
        }
        temp = temp -> link;
    }
    return head;
}


int main(){
    struct node *head;
    int ch,ele,pos,key;
    while(1)
    {
        printf("1-create\n2-insert_begin\n3-insert_end\n4-insert_pos\n5-delete_begin\n6-delete_end\n7-delete_pos\n8-display\n9-reverse_display\n10=search\n11=sort\n12=exit\n");
        printf("enter your choice\n");
        scanf("%d",&ch);
        switch(ch)
        {
            case 1: head=create();
                   break;
            case 2: scanf("%d",&ele);
                   head= insert_begin(ele);
                   break;
            case 3: scanf("%d",&ele);
                   head=insert_end(ele);
                   break;
            case 4: scanf("%d %d",&ele,&pos);
                   head=insert_pos(pos,ele);
                   break;
            case 5: head= delete_begin(head);
                   break;
            case 6: head=delete_end(head);
                   break;
            case 7: scanf("%d",&pos);
                   head= delete_pos(head,pos);
                   break;
            case 8: display(head);
                   break;
            case 9: reverse_display(head);
                   break;
            case 10:
                    scanf("%d",&key);
                    pos = searching(head,key);
                    if(pos == -1){
                            printf("element not found");
                    }
                    else{
                            printf("element at %d",pos);
                    }
                    break;
            case 11: head = sorting(head);
                     break;
            case 12: exit(0);



        }
    }
}



output:

1-create
2-insert_begin
3-insert_end
4-insert_pos
5-delete_begin
6-delete_end
7-delete_pos
8-display
9-reverse_display
10=search
11=sort
12=exit
enter your choice
1
enter no of nodes:4
26
24
22
20
enter your choice
8
26 ->24 ->22 ->20

enter your choice
2
12
enter your choice
8
12 ->26 ->24 ->22 ->20

enter your choice
3
14
enter your choice
8
12 ->26 ->24 ->22 ->20 ->14

enter your choice
4
3
10
enter your choice
8
12 ->26 ->10 ->24 ->22 ->20 ->14

enter your choice
5
deleted data 12
enter your choice
8
26 ->10 ->24 ->22 ->20 ->14

enter your choice
6
deleted data 14
enter your choice
8
26 ->10 ->24 ->22 ->20

enter your choice
7
2
deleted element 10
enter your choice
8
26 ->24 ->22 ->20

enter your choice
9
20->22->24->26

enter your choice
1
enter no of nodes5
10
29
30
49
70
1-create
 2-insert_begin
 3-insert_end
 4-insert_pos
 5-delete_begin
 6-delete_end
 7-delete_pos
 8-display
 9-reverse_display
 10-search
 11-sort
  12-exit
enter your choice
10
30
element at 3

enter your choice
1
enter no of nodes5
20
30
50
40
10
1-create
 2-insert_begin
 3-insert_end
 4-insert_pos
 5-delete_begin
 6-delete_end
 7-delete_pos
 8-display
 9-reverse_display
 10-search
 11-sort
  12-exit
enter your choice
11
1-create
 2-insert_begin
 3-insert_end
 4-insert_pos
 5-delete_begin
 6-delete_end
 7-delete_pos
 8-display
 9-reverse_display
 10-search
 11-sort
  12-exit
enter your choice
8
10 -> 20 -> 30 -> 40 -> 50 



