
#include <stdio.h>
#include<stdlib.h>
struct node{
    int data;
    struct node * link;
};
struct node* head = NULL , *cur, *temp, *temp1,*t1;
struct node*create()
{   
    int n;
    scanf("%d",&n);
    while(n--){
        cur = (struct node*)malloc(sizeof(struct node));
        scanf("%d",&cur->data);
        if(head == NULL){
            cur->link = cur;
            head = cur;
        }
        else{
            temp = head;
            while(temp->link != head){
                temp = temp->link;
            }
            temp->link = cur;
            cur->link = head;
        }
    }
return head;
}
//insert at begin
struct node*insert_begin(int ele){
    cur = (struct node*)malloc(sizeof(struct node));
    cur->data = ele;
    temp = head;
    while(temp->link != head){
        temp = temp->link;
    }
    temp->link = cur;
    cur->link = head;
    head = cur;
return head;
}

//insert at end    
struct node* insert_end(int ele){
    cur = (struct node*)malloc(sizeof(struct node));
    cur->data = ele;
    temp == head;
    while(temp->link != head){
        temp = temp->link;
        }
        temp->link = cur;
        cur->link = head;
return head;
}
 //insert at pos
 struct node* insert_pos(int pos, int ele){
     int c = 1;
     cur = (struct node*)malloc(sizeof(struct node));
     cur->data = ele;
     temp = head;
     while(c<pos-1){
         temp = temp->link;
         c++;
     }
     cur->link = temp->link;
     temp->link = cur;
    return head;
 }
 
// delete at begin
struct node* delete_begin(struct node*head){
    temp = head;
    while(temp->link != head){
        temp = temp->link;
        }
        t1 = head;
        temp->link = t1->link;
        head = t1->link;
    printf("deleted element is %d\n",t1->data);
    free(t1);
    return head;
    
}
//delete at end
struct node *delete_end(struct node *head){
	temp = head;
	while(temp -> link != head){
		temp1 = temp;
		temp = temp -> link;
	}
	temp1 -> link = head;
	printf("deleted element %d\n", temp -> data);
	free(temp);
	return head;
}
 
//delete at pos
struct node* delete_pos(struct node* head, int pos){
    temp = head;
    int c=1;
    while(c<pos){
        temp1 = temp;
        temp = temp->link;
        c++;
    }
    temp1->link = temp->link;
    printf("deleted ele %d\n", temp->data);
    free(temp);
    return head;
}

//display
void display(struct node *head){
	temp = head;
	while(temp -> link != head){
		printf("%d -> ", temp -> data);
		temp = temp -> link;
	}
	printf("%d -> ", temp -> data);
	printf("\n");
}

int main(){
    struct node *head;
    int ch,ele,pos,key;
    while(1)
    {
        printf("1-create\n2-insert_begin\n3-insert_end\n4-insert_pos\n5-delete_begin\n6-delete_end\n7-delete_pos\n8-display\n9=exit\n");
        printf("enter your choice\n");
        scanf("%d",&ch);
        switch(ch)
        {
            case 1: head=create();
                   break;
            case 2: scanf("%d",&ele);
                   head= insert_begin(ele);
                   break;
            case 3: scanf("%d",&ele);
                   head=insert_end(ele);
                   break;
            case 4: scanf("%d %d",&ele,&pos);
                   head=insert_pos(pos,ele);
                   break;
            case 5: head= delete_begin(head);
                   break;
            case 6:
			       head = delete_end(head);
			       break;
            case 7: scanf("%d",&pos);
                   head= delete_pos(head,pos);
                   break;
            case 8: display(head);
                   break;
            case 9: exit(0);



        }
    }
}


OUTPUT:
1-create
2-insert_begin
3-insert_end
4-insert_pos
5-delete_begin
6-delete_end
7-delete_pos
8-display
9=exit
enter your choice
1
5
5
10
15
20
25
1-create
2-insert_begin
3-insert_end
4-insert_pos
5-delete_begin
6-delete_end
7-delete_pos
8-display
9=exit
enter your choice
8
5 -> 10 -> 15 -> 20 -> 25 -> 
1-create
2-insert_begin
3-insert_end
4-insert_pos
5-delete_begin
6-delete_end
7-delete_pos
8-display
9=exit
enter your choice
2
1
1-create
2-insert_begin
3-insert_end
4-insert_pos
5-delete_begin
6-delete_end
7-delete_pos
8-display
9=exit
enter your choice
8
1 -> 5 -> 10 -> 15 -> 20 -> 25 -> 
1-create
2-insert_begin
3-insert_end
4-insert_pos
5-delete_begin
6-delete_end
7-delete_pos
8-display
9=exit
enter your choice
3
50
1-create
2-insert_begin
3-insert_end
4-insert_pos
5-delete_begin
6-delete_end
7-delete_pos
8-display
9=exit
enter your choice
8
1 -> 5 -> 10 -> 15 -> 20 -> 25 -> 50 -> 
1-create
2-insert_begin
3-insert_end
4-insert_pos
5-delete_begin
6-delete_end
7-delete_pos
8-display
9=exit
enter your choice
4
3
4
1-create
2-insert_begin
3-insert_end
4-insert_pos
5-delete_begin
6-delete_end
7-delete_pos
8-display
9=exit
enter your choice
8
1 -> 5 -> 10 -> 3 -> 15 -> 20 -> 25 -> 50 -> 
1-create
2-insert_begin
3-insert_end
4-insert_pos
5-delete_begin
6-delete_end
7-delete_pos
8-display
9=exit
enter your choice
5
deleted element is 1
1-create
2-insert_begin
3-insert_end
4-insert_pos
5-delete_begin
6-delete_end
7-delete_pos
8-display
9=exit
enter your choice
8
5 -> 10 -> 3 -> 15 -> 20 -> 25 -> 50 -> 
1-create
2-insert_begin
3-insert_end
4-insert_pos
5-delete_begin
6-delete_end
7-delete_pos
8-display
9=exit
enter your choice
6
deleted element 50
1-create
2-insert_begin
3-insert_end
4-insert_pos
5-delete_begin
6-delete_end
7-delete_pos
8-display
9=exit
enter your choice
8
5 -> 10 -> 3 -> 15 -> 20 -> 25 -> 
1-create
2-insert_begin
3-insert_end
4-insert_pos
5-delete_begin
6-delete_end
7-delete_pos
8-display
9=exit
enter your choice
7
4
deleted ele 15
1-create
2-insert_begin
3-insert_end
4-insert_pos
5-delete_begin
6-delete_end
7-delete_pos
8-display
9=exit
enter your choice
8
5 -> 10 -> 3 -> 20 -> 25 -> 
1-create
2-insert_begin
3-insert_end
4-insert_pos
5-delete_begin
6-delete_end
7-delete_pos
8-display
9=exit
enter your choice
9
